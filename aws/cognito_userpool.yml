Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:service.name}-userpool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmFnLambdaFunction.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:service.name}-userpool-client
      UserPoolId: !Ref CognitoUserPool
      PreventUserExistenceErrors: ENABLED
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      AnalyticsConfiguration:
        ApplicationId: !Ref PinpointAppAnalytics
        ExternalId: '123'
        RoleArn: !GetAtt CognitoPinpointAnalyticsRole.Arn
        UserDataShared: true
      CallbackURLs: # authenticated landing page
        - https://localhost:8000
      LogoutURLs: # un-authenticated landing page
        - https://localhost:8000

  CognitoUserGroupBasic:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: BASIC
      UserPoolId: !Ref CognitoUserPool
      Description: Basic/free access to backend resources.
      Precedence: 30

  CognitoUserGroupStarter:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: STARTER
      UserPoolId: !Ref CognitoUserPool
      Description: Starter paid access to backend resources.
      Precedence: 20

  CognitoUserGroupPremium:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: PREMIUM
      UserPoolId: !Ref CognitoUserPool
      Description: Premium paid access to backend resources.
      Precedence: 10

Outputs:
  UserPoolId:
    Description: ${self:service.name} userpool id.
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Description: ${self:service.name} userpool client id.
    Value: !Ref CognitoUserPoolClient
