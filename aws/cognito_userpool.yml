Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: PostConfirmFnLambdaFunction
    Properties:
      UserPoolName: ${self:service}-userpool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Mutable: true
          Required: true
        - AttributeDataType: String
          Name: userId
          Mutable: true
          Required: false
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmFnLambdaFunction.Arn

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: ${self:service}

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoIdentityPoolGoogle
    Properties:
      ClientName: ${self:service}-userpool-client
      UserPoolId: !Ref CognitoUserPool
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlowsUserPoolClient: true
      RefreshTokenValidity: 14 #days
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH # so that newman works
        - ALLOW_USER_SRP_AUTH # so that apollo works
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO
        - Google
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlows:
        - code
        - implicit
      CallbackURLs:
        - http://localhost:8000/items
        - https://dev.gilbertly.com/items
      LogoutURLs:
        - http://localhost:8000/auth
        - https://dev.gilbertly.com/auth

  CognitoUserGroupBasic:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: BASIC
      UserPoolId: !Ref CognitoUserPool
      Description: Basic/free access to backend resources.
      Precedence: 30

  CognitoUserGroupStarter:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: STARTER
      UserPoolId: !Ref CognitoUserPool
      Description: Starter paid access to backend resources.
      Precedence: 20

  CognitoUserGroupPremium:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: PREMIUM
      UserPoolId: !Ref CognitoUserPool
      Description: Premium paid access to backend resources.
      Precedence: 10

Outputs:
  UserPoolId:
    Description: ${self:service} userpool id.
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Description: ${self:service} userpool client id.
    Value: !Ref CognitoUserPoolClient
