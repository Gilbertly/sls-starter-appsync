service: starter-appsync
useDotenv: true

plugins:
  - serverless-webpack
  - serverless-appsync-plugin
  - serverless-prune-plugin
  - serverless-iam-roles-per-function

custom:
  param:
    dev:
      sentryDSN: ${env:DEV_SENTRY_DSN}
      googleClientID: ${env:DEV_GOOGLE_CLIENT_ID}
      googleClientSecret: ${env:DEV_GOOGLE_CLIENT_SECRET}
    prod:
      sentryDSN: ${env:PROD_SENTRY_DSN}
      googleClientID: ${env:PROD_GOOGLE_CLIENT_ID}
      googleClientSecret: ${env:PROD_GOOGLE_CLIENT_SECRET}
  webpack:
    webpackConfig: ./config/webpack.config.js
    packagePath: ./package.json
    packager: npm
    forceExclude:
      - aws-sdk
  appSync:
    name: ${self:provider.stage}-${self:service}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    schema: ./aws/schema.graphql
    # serviceRole: !Ref AppSyncServiceRole
    mappingTemplatesLocation: ./aws/templates
    defaultMappingTemplates:
      request: ./defaultRequest.vtl
      response: ./defaultResponse.vtl
    mappingTemplates:
      - ${file(./aws/appsync_resolvers.yml)}
    dataSources:
      - ${file(./aws/appsync_datasources.yml)}
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
  serverless-iam-roles-per-function:
    defaultInherit: true
  prune:
    automatic: true
    includeLayers: true
    number: 5

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 10 # seconds
  memorySize: 512
  stage: ${opt:region, 'dev'}
  region: ${opt:region, 'us-east-1'}
  logRetentionInDays: 7
  stackName: ${self:provider.stage}-${self:service}
  tags:
    project: ${self:provider.stage}-${self:service}
  deploymentBucket:
    blockPublicAccess: true
    serverSideEncryption: AES256
  environment:
    SENTRY_DSN: ${self:custom.param.${self.provider.stage}.sentryDSN}

layers:
  dependencies:
    name: ${self:provider.stage}-${self:service}
    description: Appsync lambda dependencies.
    package:
      artifact: dependencies.zip
    compatibleRuntimes:
      - nodejs12.x
    licenseInfo: MIT
    retain: false

functions:
  postConfirmFn:
    name: postConfirmFn
    handler: src/functions/postConfirmFn.handler
    description: Triggers after a user confirms their email.
    iamRoleStatements:
      - Sid: AddUserToCognitoGroup
        Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminUpdateUserAttributes
        Resource: '*' # todo: resolve circular dependency better.
    layers:
      - !Ref DependenciesLambdaLayer

resources:
  - ${file(./aws/iam_permissions.yml)}
  - ${file(./aws/dynamodb_tables.yml)}
  - ${file(./aws/cognito_userpool.yml)}
  - ${file(./aws/cognito_identitypool.yml)}
